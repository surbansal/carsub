// Name our cache
const CACHE_NAME = 'csa-pwa-cache';

// Delete old caches that are not our current one!
self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(caches.keys()
    .then(keyList =>
      Promise.all(keyList.map((key) => {
        if (!cacheWhitelist.includes(key)) {
          return caches.delete(key);
        }
        return null;
      }))));
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', (event) => {
  event.waitUntil(caches.open(CACHE_NAME)
    .then((cache) => {
      // Get the assets manifest so we can see what our js file is named
      // This is because webpack hashes it
      fetch('manifest.json')
        .then((response) => {
          return response.json();
        })
        .then((assets) => {
          // Open a cache and cache our files
          // We want to cache the page and the main.js generated by webpack
          // We could also cache any static assets like CSS or images
          const urlsToCache = [
            '/',
            assets['main.js']
          ];
          cache.addAll(urlsToCache);
        });
    }));
});

function networkRequestWithCacheFallback(event) {
  event.respondWith(fetch(event.request).then((response) => {
    const clonedResponse = response.clone();
    caches.open(CACHE_NAME).then((cache) => {
      cache.put(event.request, clonedResponse);
    });
    return response;
  }).catch(() => {
    return caches.match(event.request);
  }));
}

function cacheRequestWithNetworkFallback(event) {
  event.respondWith(caches.match(event.request).then((response) => {
    return response || fetch(event.request);
  }));
}

self.addEventListener('fetch', (event) => {
  if (!event.request.url.includes('/api/')) {
    if (event.request.url.includes(location.origin) || event.request.url.includes('cdn.contentful') || event.request.url.includes('ctfassets.net')) {
      networkRequestWithCacheFallback(event);
    } else {
      cacheRequestWithNetworkFallback(event);
    }
  }
});
